# Generated by Django 3.2.16 on 2023-02-08 15:02

import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import nautobot.extras.models.mixins
import nautobot.extras.models.statuses
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("extras", "0053_relationship_required_on"),
        ("dcim", "0019_device_redundancy_group_data_migration"),
    ]

    operations = [
        migrations.CreateModel(
            name="FloorPlan",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("x_size", models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ("y_size", models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                (
                    "tile_width",
                    models.PositiveSmallIntegerField(
                        default=100, validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                (
                    "tile_depth",
                    models.PositiveSmallIntegerField(
                        default=100, validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                (
                    "location",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name="floor_plan", to="dcim.location"
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "ordering": ["location___name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="FloorPlanTile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("x", models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ("y", models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                (
                    "floor_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tiles",
                        to="nautobot_floor_plan.floorplan",
                    ),
                ),
                (
                    "rack",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="floor_plan_tile",
                        to="dcim.rack",
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_floor_plan_floorplantile_related",
                        to="extras.status",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "ordering": ["floor_plan", "y", "x"],
                "unique_together": {("floor_plan", "x", "y")},
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
    ]
